import { session, app, BrowserWindow, nativeTheme } from "electron";
import * as Rx from "rxjs";
import autoUpdater from "update-electron-app";

import { initIpcRouter } from "main/ipcRouter";
import { Config } from "main/config";
import { RepoCollection } from "main/repos";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const createWindow = (config: Config): void => {
  Rx.firstValueFrom(config.get$("windowBounds")).then((oldBounds) => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
      height: oldBounds?.height || 1000,
      width: oldBounds?.width || 1200,
      x: oldBounds?.x,
      y: oldBounds?.y,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        nodeIntegration: true,
        contextIsolation: false,
      },
    });

    // auto persist window bounds to config
    Rx.merge(
      Rx.fromEvent(mainWindow, "resized"),
      Rx.fromEvent(mainWindow, "moved")
    )
      .pipe(
        Rx.debounceTime(1000),
        Rx.mergeMap(() =>
          config.update$({
            windowBounds: mainWindow.getBounds(),
          })
        ),
        Rx.catchError((error, source$) => {
          console.error("Failed to persist window bounds", error);
          return source$;
        })
      )
      .subscribe();

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  });
};

async function init() {
  autoUpdater({
    repo: "spalger/localgnome",
  });

  await app.whenReady();

  // ensure that CSP is set to the most restrictive value
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": ["script-src 'self'"],
      },
    });
  });

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
      app.quit();
    }
  });

  app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow(config);
    }
  });

  const config = new Config();
  const repos = new RepoCollection(config);

  // bind the config to electron modules
  config
    .get$("theme")
    .pipe(
      Rx.map((theme) => {
        nativeTheme.themeSource = theme ?? "system";
      })
    )
    .subscribe({
      error(error) {
        console.error("Failed to set theme", error);
        process.exit(1);
      },
    });

  await initIpcRouter({
    config,
    repos,
  });

  createWindow(config);
}

init().catch((error) => {
  console.error("UNCAUGHT EXCEPTION", error);
  process.exit(1);
});
